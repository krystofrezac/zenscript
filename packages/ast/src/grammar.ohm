BoringLang {
  space := " " | "\t" | newLine | oneLineComment | multiLineComment

  Program = ListOf<Statement, #(newLine)>

  Statement = | VariableDeclaration
              | ExportedVariable
              | Expression

  newLine = " "*"\n"" "*
  expressionAssignmentOperator = "="
  typeAssignmentOperator = ":"
  oneLineComment = "//" (~newLine any)* 
  multiLineComment = "/*" (~"*/" any)* "*/"

  VariableDeclaration = | identifierExpression ExpressionAssignment                            -- onlyExpression
                        | identifierExpression TypeAssignment ExpressionAssignment             -- expressionAndType
                        | identifierExpression TypeAssignment                                  -- onlyType
  ExpressionAssignment = expressionAssignmentOperator Expression
  TypeAssignment = typeAssignmentOperator TypeExpression 

  ExportedVariable = "export" VariableDeclaration

  Expression = | FunctionCallExpression
               | FunctionDeclarationExpression
               | numberExpression
               | stringExpression
               | booleanExpression 
               | RecordExpression
               | RecordEntryAccessExpression
               | identifierExpression
               | Block
               | TupleExpression
               | compilerHookExpression

  TypeExpression = | FunctionDeclarationType
                   | stringType
                   | numberType
                   | booleanType
                   | TupleType
                   | FunctionCallType
                   | RecordType
                   | RecordEntryAccessType
                   | identifierType
                   | Block
                   | compilerHookType

  identifier = letter+
  identifierExpression = identifier
  identifierType = identifier

  compilerHookExpression = "@"identifier
  compilerHookType = "@"identifier


  numberExpression = digit+
  numberType = "number"

  stringCharacter =  ~("\"" | "\\" | newLine) any
  stringExpression = "\"" stringCharacter* "\""
  stringType = "string"

  Block = "{" ListOf<Statement, #(newLine)> "}"

  trueExpression = "true"
  falseExpression = "false"
  booleanExpression = trueExpression | falseExpression
  booleanType = "boolean"

  TupleExpression = "(" ListOf<Expression, ","> ")"
  TupleType = "(" ListOf<TypeExpression, ","> ")"


  RecordEntryExpression = identifierExpression ":" Expression
  RecordExpression = "%{" ListOf<RecordEntryExpression, ","> "}"

  RecordEntryType = identifierType ":" TypeExpression
  RecordType = "%{" ListOf<RecordEntryType, ","> "}"

  Min2List<Expression, Separator> = Expression Separator NonemptyListOf<Expression, Separator>

  RecordEntryAccessExpression = Min2List<identifierExpression, ".">
  RecordEntryAccessType = Min2List<identifierType, ".">

  FunctionParameter = identifierExpression
  FunctionDeclarationExpression = "(" ListOf<FunctionParameter, ","> ")" Expression
  FunctionDeclarationType = TupleType TypeExpression

  FunctionCallExpression = Expression TupleExpression
  FunctionCallType = TypeExpression TupleType
}