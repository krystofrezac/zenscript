BoringLang {
  space := " " | "\t" | newLine | oneLineComment | multiLineComment

  Program = ListOf<Statement, #(newLine)>

  Statement = | VariableDeclaration
              | Expression

  newLine = " "*"\n"" "*
  valueAssignmentOperator = "="
  typeAssignmentOperator = ":"
  oneLineComment = "//" (~newLine any)* 
  multiLineComment = "/*" (~"*/" any)* "*/"

  VariableDeclaration = | identifier ValueAssignment                            -- onlyValue
                        | identifier TypeAssignment ValueAssignment             -- valueAndType
                        | identifier TypeAssignment                             -- onlyType

  ValueAssignment = valueAssignmentOperator Expression
  TypeAssignment = typeAssignmentOperator TypeExpression 

  Expression = | FunctionValueCall
               | FunctionValueDeclaration
               | numberExpression
               | stringExpression
               | booleanExpression 
               | RecordExpression
               | RecordEntryAccessExpression
               | identifier
               | Block
               | TupleExpression

  TypeExpression = | FunctionTypeDeclaration
                   | stringType
                   | numberType
                   | booleanType
                   | genericName
                   | TupleType
                   | FunctionTypeCall
                   | RecordType
                   | RecordEntryAccessType
                   | identifier

  identifier = letter+
  genericName = "'" identifier
  numberExpression = digit+

  stringExpression = "\"" stringCharacter* "\""
  stringCharacter =  ~("\"" | "\\" | newLine) any

  Block = "{" ListOf<Statement, #(newLine)> "}"

  booleanExpression = trueExpression | falseExpression
  trueExpression = "true"
  falseExpression = "false"
  stringType = "string"
  numberType = "number"
  booleanType = "boolean"
  compilerHook  = "@"letter+

  TupleExpression = "(" ListOf<Expression, ","> ")"
  TupleType = "(" ListOf<TypeExpression, ","> ")"

  RecordEntry<Value> = identifier ":" Value
  RecordContent<Value> = ListOf<RecordEntry<Value>, ",">

  RecordExpression = "%{" RecordContent<Expression> "}"
  RecordType = "%{" RecordContent<TypeExpression> "}"

  Min2List<Value, Separator> = Value Separator NonemptyListOf<Value, Separator>

  RecordEntryAccessExpression = Min2List<identifier, ".">
  RecordEntryAccessType = Min2List<identifier, ".">

  FunctionParameter = identifier
  FunctionValueDeclaration = "(" ListOf<FunctionParameter, ","> ")" Expression
  FunctionTypeDeclaration = TupleType TypeExpression

  FunctionValueCall = Expression TupleExpression
  FunctionTypeCall = TypeExpression TupleType
}